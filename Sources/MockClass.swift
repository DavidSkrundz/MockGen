//
//  Mock.swift
//  MockGen
//

let mockClass = [
"import XCTest",
"",
"func castToOptional<T>(x: Any) -> T? {",
"\treturn Mirror(reflecting: x).descendant(\"Some\") as? T",
"}",
"",
"class Mock {",
"\tprivate var accessLog = [String : [Any]]()",
"\t",
"\tfunc reset() {",
"\t\tself.accessLog = [:]",
"\t}",
"\t",
"\tfunc recordMethodCall(name: String, args: Any) {",
"\t\tself.accessLog[name] = (self.accessLog[name] ?? []) + [args]",
"\t}",
"}",
"",
"class Verifyable {",
"\tprivate var accessLog = [String : [Any]]()",
"\t",
"\tinit(accessLog: [String : [Any]]) {",
"\t\tself.accessLog = accessLog",
"\t}",
"\t",
"\tfunc verifyCalled(name: String) {",
"\t\tXCTAssertNotNil(self.accessLog[name])",
"\t}",
"\t",
"\tfunc verifyCalled(name: String, count: Int) {",
"\t\tXCTAssertEqual(count, self.accessLog[name]?.count ?? 0)",
"\t}",
"\t",
"\tfunc verifyCalled(name: String, @noescape argsPredicate:  (args: Any) -> Bool) {",
"\t\tXCTAssertFalse(self.accessLog[name]?.map { argsPredicate(args: $0) }.contains(false) ?? true)",
"\t}",
"}",
].joined(separator: "\n")
